// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Data.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Data.Models
{
    public partial class ICContext
    {
        private IICContextProcedures _procedures;

        public virtual IICContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ICContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IICContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class ICContextProcedures : IICContextProcedures
    {
        private readonly ICContext _context;

        public ICContextProcedures(ICContext context)
        {
            _context = context;
        }

        public virtual async Task<List<spGetCoinsResult>> spGetCoinsAsync(string pDateTime, int? pMin, double? pPercentage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pDateTime",
                    Size = 30,
                    Value = pDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pMin",
                    Value = pMin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pPercentage",
                    Value = pPercentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetCoinsResult>("EXEC @returnValue = [dbo].[spGetCoins] @pDateTime = @pDateTime, @pMin = @pMin, @pPercentage = @pPercentage", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spReportResult>> spReportAsync(string pInterval, int? pCnt, string pRecommendation, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pInterval",
                    Size = 20,
                    Value = pInterval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pCnt",
                    Value = pCnt ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pRecommendation",
                    Size = 20,
                    Value = pRecommendation ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spReportResult>("EXEC @returnValue = [dbo].[spReport] @pInterval = @pInterval, @pCnt = @pCnt, @pRecommendation = @pRecommendation", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spRunReportResult>> spRunReportAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spRunReportResult>("EXEC @returnValue = [dbo].[spRunReport]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
